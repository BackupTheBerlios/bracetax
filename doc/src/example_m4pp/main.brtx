
{header|
    {title|Self-documenting authoring example}
    {authors|Sebastien Mondet}
    {subtitle|Using m4, post-processing and more{...}}
}

{section 1 sec_links|Some links}

We will use {link http://en.wikipedia.org/wiki/M4_(computer_language)|M4} 

{section 1 sec_examples|Detailled examples}

{section 2 sec_def_todo|Creating a {q|ToDo} tag}


define(`TODO', ifelse(_output_format , HTML , `{verbatim end html}
<span style="color: red; background-color: yellow">TO-DO</span>
{end}' , `{verbatim end latex}
\textcolor{red}{TO-DO}
{end}'
))dnl

Here is the M4 code{note|M4 code will appear for now with {#} characters}:
{verbatim e m4_code}
# define(`TODO', ifelse(_output_format , HTML , `{verbatim end html}
# <span style="color: red; background-color: yellow">TO-DO</span>
# {end}' , `{verbatim end latex}
# \textcolor{red}{TO-DO}
# {end}'
# ))dnl
{e}
so, with the command:
{verbatim e shell_code}
m4  -D_output_format="LATEX"  main.brtx > main.brtx.tmp
{e}
with a {t|`TODO'}, the {t|main.tex} generated by {t|brtx} will look
like{note|Except the classical space between '\' and 'begin/end'{...}}:
{verbatim e latex_code}
%verbatimbegin:latex
\ begin{verbatim}
\textcolor{red}{TO-DO}
\ end{verbatim}
%verbatimend:latex
{e}
which will be transformed by the post-processor:
{verbatim e shell_code}
brtx -postpro -pp inlinelatex -i main.tex.pp -o main.tex
{e}
to:
{verbatim e latex_code}
% < inline latex >
\textcolor{red}{TO-DO}
% </ inline latex >
{e}

{section 2 sec_latex_command|Defining the {t|LATEX} command}

define(`LATEX',{verbatim verycomplexend latex}
$1
{verycomplexend}')
Quite simply:
{verbatim eee}
# define(`LATEX',{verbatim verycomplexend latex}
# $1
# {verycomplexend}')
{eee}

And then:
{verbatim eee}
`LATEX'(Some {\bf bold} and $m = a^{th}_{ematics}$)
{eee}
will generate:
{verbatim eee}
LATEX(Some {\bf bold} and $m = a^{th}_{ematics}$)
{eee}
With post-processing, for LaTeX output:
{verbatim}
brtx -postpro -pp inlinelatex -i ... -o ...
{endverbatim}
and for HTML output (needs {link http://hevea.inria.fr/|Hevea} to convert from
LaTeX to HTML):
{verbatim}
brtx -postpro -pp latex2html:hevea -i ... -o ...
{endverbatim}
we get:
LATEX(Some {\bf bold} and $m = a^{th}_{ematics}$)


{section 2 sec_date_command|Using command line definitions}

Here we have compilation date: {t|_todaydate}
{p}
For that we just passed the source:
{verbatim e brtx_code}
Here we have compilation date: {t|`_todaydate'}
{e}
through the command:
{verbatim e shell_code}
m4 -D`_todaydate'="$(date)" main.brtx > main.brtx.tmp
{e}

{section 2 sec_biblio|Citations}

Let's say we want to use BibTeX for LaTeX output and that we have a
bibliography site ({t|./biblio/<refname>.html} or
{t|./biblio.html{#}<refname>}).

define(`CITATION', ifelse(_output_format , HTML , [{link ./biblio/$1.html|$1}], dnl
`{verbatim end latex}
\cite{$1}
{end}'
))dnl

We define `CITATION':
{verbatim}
# define(`CITATION', ifelse(_output_format , HTML , [{link ./biblio/$1.html|$1}], dnl
# `{verbatim end latex}
# \cite{$1}
# {end}'
# ))dnl
{endverbatim}
so that
{verbatim eee}
`CITATION'(mondet08bracetax)
{eee}
will give us:
{verbatim eee}
CITATION(mondet08bracetax)
{eee}


{section 2 sec_include|Using {t|include}}

With a simple:
{verbatim e brtx_code}
{verbatim verycomplexend}
`include'(./Makefile)
{verycomplexend}
{e}
we obtain:
{verbatim verycomplexend}
include(./Makefile)
{verycomplexend}


