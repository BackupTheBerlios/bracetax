

{header|
    {title|Build and Use}
}

{section 1|Build}

Just need {link http://www.ocaml.org|OCamL} (at least version 3.09), and run:
{code}
./mk
{end}
And then copy {t|main.byte} somewhere in your {t|$PATH} as {t|brtx}. Please
see {q|{t|mk h}} for more options ({i|e.g.} compilation without
{t|ocamlbuild}, documentation generation{...}).
{code}
./mk <cmd>
b: Build brtx (default action)
bg: Build brtx with debug symbols
o: Build brtx with native compilation
bc: Build brtx without ocamlfind and ocamlbuild (e.g. with ocaml 3.09.x)
i: Install the ocamlbracetax library with ocamlfind
ui: Uninstall the library
t: Do the tests
d: Build the documentation without building pdfs
D: Build the whole documentation.
cd: Clean documentation
c: Clean
h: This help
{end}

For example, if you want to use the ocaml library, with
ocamlfind, {q|{t|mk i}} will install it (in the standard path for
local ocamlfind packages, which may require {i|root} access rights).


{section 1|Usage}

{section 2|Options}

Here is the usage information:
{code}
usage: brtx [-i file] [-o file] [-help]
  -version            Print version and exit
  -license            Print license and exit
  -html               Output HTML format (default)
  -latex              Output LaTeX format
  -toc                Get the table of contents
  -i <file>           input file (default or "-" is standard input)
  -o <file>           output file (default or "-" is standard output)
  -doc                Output a complete document
  -title <text>       Set the title of the document
                      ('head.title' for XHTML, PDF meta-data for LaTeX),
                      requires -doc
  -link-css <url>     link to a CSS, requires -html,-doc
  -css-hook <text>    add a class="text..." to all tags, requires -html
  -use-package <name> use a given package, requires -latex,-doc
  -href-footnote      treat links as LaTeX footnotes with URLs, requires -latex
  -print-comments     activate the transmission of brtx comments to
                      the output's comments (-html or -latex)
  -deny-bypass        treat all {bypass} as {code} (security of interpreted webapps)
  -ignore-header      Do not process the {header| ... } part
  -no-warn-error      Do not treat warnings as errors (return 0 to shell/make/...)
  -warn-error         Treat warnings as errors (default, return 2 to shell)
  -help               Display this list of options
  --help              Display this list of options
{end}


{section 2|Examples}

#{section 3|Transform {i|bracetax} syntax}

Convert a bracetax file to XHTML:
{code}
brtx -html -i README.brtx -o README.html
{end}
{p}
Convert a file to LaTeX:
{code}
brtx -latex -i README.brtx -o README.html
{end}
{p}

The option {t|-doc} adds header and footer (for both HTML and LaTeX):
{code e}
brtx -html -i README.brtx -o README.html -doc
{e}
will provide the {t|<!DOCTYPE html ...} etc...
{p}

Transform any string:
{code}
 $ echo 'I say {b|Hello} {i|world}{~}!!' | brtx -html
<p>I say <b>Hello</b> <i>world</i>&nbsp;!!</p>
{end}


